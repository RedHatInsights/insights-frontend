%clearfix:before,
%clearfix:after {
  content: " "; /* 1 */
  display: table; /* 2 */
}

%clearfix:after { clear: both; }

@mixin clearfix() {
	*zoom: 1;

	&:before, &:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}

	&:after {
		clear: both;
	}
}

%vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin policyState($state) {
  @if $state == failed {
    @include policyState-Styles('red', '\f057');
  }
  @if $state == passed {
    @include policyState-Styles('green', '\f058');
  }
  @if $state == errored {
    @include policyState-Styles('yellow', '\f071');
  }
  @if $state == unknown {
    @include policyState-Styles('unknown', '\f059');
  }
}

@mixin policyState-Styles($color, $icon){
  background: map-get($stateColors, 'bg-' + $color);
  color: $base-color;
  box-shadow: inset 3px 0 0 0 map-get($stateColors, 'bs-' + $color);
  &:before { 
    font-family: FontAwesome;
    content: $icon; 
    color: map-get($stateColors, 'f-' + $color);
    @include rem ('padding-left', 5px);
    @include rem ('margin-right', 5px);
  }
}

@mixin v-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.v-align {
  @include v-align;
}

%reset {
  margin: 0;
  padding: 0;
}

@mixin reset {
  margin: 0;
  padding: 0;
}

%font_blue { color: $blue; }

@mixin margin($margin) {

}

@mixin reset-button($padding) {
  margin: 0;
  @include rem('padding', $padding);
  background: none;
  border-radius: 0;
}

// Button mixin
@mixin button($text-color, $bg-color) {
  font: 12px bold sans-serif;
  border: none;
  line-height: 1;
  box-shadow: none;
  @include button-color($text-color, $bg-color);
  //&:hover, &:focus { @include button-color($text-color, lighten($bg-color, 10%)); }
  &:active { background: darken($bg-color, 5%); }
}

// Color button mixin
@mixin button-color($text-color, $bg-color) {
  color: $text-color;
  background: $bg-color;
}


// Convert Px to Rem
// =================================================================/

// Global Convert
// -------------------------------------------------------------/
@mixin rem($property, $values) {

  // Create a couple of empty lists as output buffers.
  $font-size: $base-font-size;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {

    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if type-of($value) == number and not unitless($value) and (unit($value) == px) {

      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, unquote("#{$new-rem-value}rem"));

    } @else if type-of($value) == number and not unitless($value) and (unit($value) == '%') {

      // % value given - don't add px or rem
      $px-values: join($px-values, unquote(#{$value}));
      $rem-values: join($rem-values, unquote(#{$value}));

    } @else if $value == auto {

      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);

    } @else {

      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, unquote("#{$value}rem"));
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;

}

@mixin font-size($size, $line: $size * 1.4) {
  font-size: ($size);
  font-size: ($size / $base-font-size) + rem;

  @if $line == 1 { 
    line-height: 1; 

  } @else if $line != null {
    line-height: $line;
    line-height: ($line / $base-font-size) + rem;
  }
}

@mixin media-query($point) {
  @if($point == xs) {
    @media screen and(min-width: $xs) {
      @content;
    }
  } @elseif($point == sm) {
    @media screen and(min-width: $sm) {
      @content;
    }
  } @elseif($point == md) {
    @media screen and(min-width: $md) {
      @content;
    }
  } @elseif($point == lg) {
    @media screen and(min-width: $lg) {
      @content;
    }
  } @elseif($point == xl) {
    @media screen and(min-width: $xl) {
      @content;
    }
  } @elseif($point == xs-max) {
    @media screen and(max-width: $xs) {
      @content;
    }
  } @elseif($point == sm-max) {
    @media screen and(max-width: $sm) {
      @content;
    }
  } @elseif($point == md-max) {
    @media screen and(max-width: $md) {
      @content;
    }
  } @elseif($point == lg-max) {
    @media screen and(max-width: $lg) {
      @content;
    }
  } @elseif($point == xl-max) {
    @media screen and(max-width: $xl) {
      @content;
    }
  }

}

// Inline Retina Display Media Query
// =================================================================/

@mixin at2x($image, $width, $height) {

  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }

}

// Input placeholder mixin
// ------------------------
@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

// Fluid type
// =================================================================/

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

// Generate Tile Gradient
// =================================================================/
@mixin tile($tile-color-base) {
  i {
    $tile-secondary-color: darken($tile-color-base, 7%);

    background: $tile-color-base; 
    background: linear-gradient(to bottom, $tile-color-base 0%, $tile-secondary-color 100%);

    @if (lightness($tile-color-base) > 50) { color: $black-base; }
    @else { color: #fff; }

    @include rem('padding', 20px);
    border-radius: 5px;
  }
}
