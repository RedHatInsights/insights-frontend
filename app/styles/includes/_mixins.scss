%clearfix:before,
%clearfix:after {
  content: " "; /* 1 */
  display: table; /* 2 */
}

%clearfix:after { clear: both; }

@mixin clearfix() {
	*zoom: 1;

	&:before, &:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}

	&:after {
		clear: both;
	}
}

%vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin policyState($state) {
  @if $state == failed {
    @include policyState-Styles('red', '\f057');
  }
  @if $state == passed {
    @include policyState-Styles('green', '\f058');
  }
  @if $state == errored {
    @include policyState-Styles('yellow', '\f071');
  }
  @if $state == unknown {
    @include policyState-Styles('unknown', '\f059');
  }
}

@mixin policyState-Styles($color, $icon){
  background: map-get($stateColors, 'bg-' + $color);
  color: $base-color;
  box-shadow: inset 3px 0 0 0 map-get($stateColors, 'bs-' + $color);
  &:before { 
    font-family: FontAwesome;
    content: $icon; 
    color: map-get($stateColors, 'f-' + $color);
    @include rem ('padding-left', 5px);
    @include rem ('margin-right', 5px);
  }
}

@mixin v-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.v-align {
  @include v-align;
}

%reset {
  margin: 0;
  padding: 0;
}

@mixin reset {
  margin: 0;
  padding: 0;
}

%font_blue { color: $blue; }

@mixin margin($margin) {

}

@mixin reset-button($padding) {
  margin: 0;
  @include rem('padding', $padding);
  background: none;
  border-radius: 0;
}

// Button mixin
@mixin button($text-color, $bg-color) {
  font: 12px bold sans-serif;
  border: none;
  line-height: 1;
  box-shadow: none;
  @include button-color($text-color, $bg-color);
  //&:hover, &:focus { @include button-color($text-color, lighten($bg-color, 10%)); }
  &:active { background: darken($bg-color, 5%); }
}

// Color button mixin
@mixin button-color($text-color, $bg-color) {
  color: $text-color;
  background: $bg-color;
}


// Convert Px to Rem
// =================================================================/

// Global Convert
// -------------------------------------------------------------/
@mixin rem($property, $values) {

  // Create a couple of empty lists as output buffers.
  $font-size: $base-font-size;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {

    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if type-of($value) == number and not unitless($value) and (unit($value) == px) {

      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, unquote("#{$new-rem-value}rem"));

    } @else if type-of($value) == number and not unitless($value) and (unit($value) == '%') {

      // % value given - don't add px or rem
      $px-values: join($px-values, unquote(#{$value}));
      $rem-values: join($rem-values, unquote(#{$value}));

    } @else if $value == auto {

      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);

    } @else {

      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, unquote("#{$value}rem"));
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;

}

@mixin font-size($size, $line: $size * 1.4) {
  font-size: ($size);
  font-size: ($size / $base-font-size) + rem;

  @if $line == 1 { 
    line-height: 1; 

  } @else if $line != null {
    line-height: $line;
    line-height: ($line / $base-font-size) + rem;
  }
}

@mixin media-query($point) {
  @if($point == xs) {
    @media screen and(min-width: $xs) {
      @content;
    }
  } @elseif($point == sm) {
    @media screen and(min-width: $sm) {
      @content;
    }
  } @elseif($point == md) {
    @media screen and(min-width: $md) {
      @content;
    }
  } @elseif($point == lg) {
    @media screen and(min-width: $lg) {
      @content;
    }
  } @elseif($point == xl) {
    @media screen and(min-width: $xl) {
      @content;
    }
  } @elseif($point == xs-max) {
    @media screen and(max-width: $xs) {
      @content;
    }
  } @elseif($point == sm-max) {
    @media screen and(max-width: $sm) {
      @content;
    }
  } @elseif($point == md-max) {
    @media screen and(max-width: $md) {
      @content;
    }
  } @elseif($point == lg-max) {
    @media screen and(max-width: $lg) {
      @content;
    }
  } @elseif($point == xl-max) {
    @media screen and(max-width: $xl) {
      @content;
    }
  }

}

// Inline Retina Display Media Query
// =================================================================/

@mixin at2x($image, $width, $height) {

  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }

}

// Input placeholder mixin
// ------------------------
@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

// Fluid type
// =================================================================/

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

// Generate Tile Gradient
// =================================================================/
@mixin tile($tile-color-base) {
  i {
    $tile-secondary-color: darken($tile-color-base, 7%);

    background: $tile-color-base; 
    background: linear-gradient(to bottom, $tile-color-base 0%, $tile-secondary-color 100%);

    @if (lightness($tile-color-base) > 50) { color: $black-base; }
    @else { color: #fff; }

    @include rem('padding', 20px);
    border-radius: 5px;
  }
}


/* Patternfly overrides
/* ================================================================== */
@mixin opacity($val) {
  opacity: $val;
}

@mixin box-shadow($val) {
  box-shadow: $val;
}


/* ==================================================================
/* Account select
/* ================================================================== */
/**
 * This document defines the styling for the account select feature
 * currently nested within primary and mobile nav.
**/

// This exists in global vars
:root {
  --global--spacer--sm: .5rem;
  --global--spacer--md: 1rem;
  --global--spacer--lg: 2rem;
  --global-grid-gap: var(--global--spacer--lg);
}


// Breakpoints
$sm: 768px;
$md: 992px;
$lg: 1200px;
$xl: 1440px;

$grid-gap: var(--global-grid-gap);

@mixin media-query($point) {
  @if($point == sm) {
    @media screen and(min-width: $sm) {
      @content;
    }
  } @elseif($point == md) {
    @media screen and(min-width: $md) {
      @content;
    }
  } @elseif($point == lg) {
    @media screen and(min-width: $lg) {
      @content;
    }
  } @elseif($point == xl) {
    @media screen and(min-width: $xl) {
      @content;
    }
  }
}


@mixin assign-cols($columns, $breakpoint: null, $responsive: null) {
  // If not responsive
  @if $responsive == null {
    grid-template-columns: $columns;
  } 

  // If responsive
  @else {
    @include media-query($breakpoint) {
      grid-template-columns: $columns;
    }
  }
}


@mixin assign-rows($rows, $breakpoint: null, $responsive: null) {
  // If not responsive
  @if $responsive == null {
    grid-template-rows: $rows;
  } 

  // If responsive
  @else {
    @include media-query($breakpoint) {
      grid-template-rows: $rows;
    }
  }
}


@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

@mixin loop-through-values ($columns) {

  // Initialize local vars
  $index: 1;
  $breakpoint: null;
  $responsive: null;

  // We'll use this to evaluate whether or not arglist arguments are preceeded with a responsive value
  $first-list-item: nth($columns, 1);


  /* Test for responsive
  /* ================================================================== */
  
  // True: if $arg is preceeded with a responsive size, if so increment index
  @if $first-list-item == 'sm-cols' or $first-list-item == 'md-cols' or $first-list-item == 'lg-cols' or $first-list-item == 'xl-cols' {
    $responsive: true;
    $index: 2;
    $new-name: str-replace(nth($columns, 1), '-cols', '');
    $breakpoint: $new-name;
  } 

  // False: leave/reset $breakpoint, $responsive variabless
  @else {
    // Reset values
    $breakpoint: null;
    $responsive: null;
  }

  $col-list-init: nth($columns, $index);


  /* Param = grid-gap
  /* ================================================================== */
  @if $col-list-init == 'grid-gap' {
    $grid-gap: nth($columns, $index + 1);
    grid-gap: $grid-gap;
  }


  /* If unitless values
  /* ================================================================== */
  @else if type-of($col-list-init) == number and unitless($col-list-init) {
    @warn 'Missing unit value for: "' + $col-list-init + 
    '" If explicitly defining grid columns, a unit must be included. Alternatively, you can use cols #num, where #num is an integer.';
  }


  /* If 'cols'
  /* ================================================================== */
  @else if $col-list-init == repeat {

    $cols: repeat(nth($columns, $index + 1), 1fr);
    @include assign-cols($cols, $breakpoint, $responsive); // Apply

  } 

  /* If values are set explicitly
  /* ================================================================== */
  @else if (type-of($col-list-init) == number and not unitless($col-list-init)) 
    or $col-list-init == auto 
    or $col-list-init == max-content
    or $col-list-init == min-content {
    
    $cols: ();

    @for $i from $index through length($columns) {
      $val: nth($columns, $i);
      $cols: append($cols, $val);

      @if type-of($val) == number and unitless($val) {
        @warn 'Missing unit value for: "' + $val + 
        '" If explicitly defining grid columns, a unit must be included ';
      } 
    }     

    @include assign-cols($cols, $breakpoint, $responsive); // Apply
  }


  @else if $first-list-item == 'sm-rows' or $first-list-item == 'md-rows' or $first-list-item == 'lg-rows' or $first-list-item == 'xl-rows' {
    $responsive: true;
    $index: 2;
    $new-name: str-replace(nth($columns, 1), '-rows', '');
    $breakpoint: $new-name;

    $rows: ();

    @for $i from $index through length($columns) {
      $val: nth($columns, $i);
      $rows: append($rows, $val);

      @if type-of($val) == number and unitless($val) {
        @warn 'Missing unit value for: "' + $val + 
        '" If explicitly defining grid columns, a unit must be included ';
      } 
    }     

    @include assign-rows($rows, $breakpoint, $responsive); // Apply
  }
}

@mixin grid-builder($args...) {

  // Base styling
  display: grid;
  grid-template-columns: 1fr;
  grid-gap: var(--global-grid-gap);

  // @warn $args;
  @each $arg in $args {
    // Initialize $responsive
    $arg1: nth($arg, 1);
    $responsive: null;

    @include loop-through-values($arg);
  }
}

.cell {
  padding: 1rem;
  background: lightgray;
}

/* Usage
/* ================================================================== */


.container1 {
  // Base styling
  --container1-padding: var(--global--spacer--lg);
  padding: var(--container1-padding);
  
  @include grid-builder(1fr 1fr 1fr, sm-cols 100px 100px 1fr, md-cols 20% 60%, sm-cols repeat 4, sm-rows 50px 120px, md-rows repeat 4);
}

/**
 * Options:
 * sm, md, lg, xl-rows: value || repeat num
 * sm, md, lg, xl-cols: value || repeat num
 * grid-gap: num;
**/


