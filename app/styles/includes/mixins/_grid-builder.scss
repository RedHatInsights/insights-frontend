:root {
  --pf-l-grid--has-gutters--GridGap: var(--pf-global--spacer--md);
}


.pf-l-grid {
  display: grid;
  grid-template-columns: repeat(12, [col-start] 1fr);
  padding: var(--global-padding);
  
  > * {
    grid-column-start: auto;
    grid-column-end: span 12;
    box-sizing: border-box;
    // padding: 1rem;
  }
}


/* ==================================================================
/* Grid builder mixin
/* ================================================================== */
/**
 * This document defines the styling for the account select feature
 * currently nested within primary and mobile nav.
 *
 *
 * Options:
 * sm, md, lg, xl-rows: value || repeat num
 * sm, md, lg, xl-cols: value || repeat num
 * grid-gap: num;
**/

// Global vars
:root {
  --global--spacer--sm: .5rem;
  --global--spacer--md: 1rem;
  --global--spacer--lg: 2rem;
  --global-grid-gap: var(--global--spacer--lg);
}

html,
body {
  height: 100%;
}


// Base variables
$global-grid-gap: $global-margin;
$global-grid-padding: $global-grid-gap;


// Breakpoints
$sm: 768px;
$md: 992px;
$lg: 1200px;
$xl: 1440px;


/* Mixin: media-query
/* Purpose: Media query shortcut
/* Options: $sm, $md, $lg, $xl
/* Usage: @include assign-rows();
/* ================================================================== */
@mixin media-query($point) {
  @if($point == sm) {
    @media screen and(min-width: $sm) {
      @content;
    }
  } @elseif($point == md) {
    @media screen and(min-width: $md) {
      @content;
    }
  } @elseif($point == lg) {
    @media screen and(min-width: $lg) {
      @content;
    }
  } @elseif($point == xl) {
    @media screen and(min-width: $xl) {
      @content;
    }
  }
}


.cell {
  padding: 1rem;
  background: lightgray;
}


// Replace matching string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index { @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace); }
  @return $string;
}


// Grid 
$grid-map: (
  list-eval-responsive: (
    sm, 
    md, 
    lg, 
    xl
  ),
  list-eval-property: (
    grid-gap, 
    repeat, 
    padding
  ),
  list-eval-keyword: (
    auto, 
    min-content, 
    max-content
  ),
  list-eval-rows: (
    rows-sm, 
    rows-md, 
    rows-lg, 
    row-xl
  )
);

$row-map: (
  
);

// Check for value in list
@function list-contains($list, $var) {
  @if index($list, $var) { 
    @return true; 
  } @else { 
    @return false 
  };
}


// Build classnames e.g. col-pf- + 1 + sm
@function construct-type($arg) {
  @return is + str-replace($arg, 'list-eval', '');
}


// If list has values
@function is-valid-list($value-count, $list: ()) {
  @if length($list) > $value-count {
    @return true;
  } @else {
    @warn 'mixin build-grid: Argument in argument list must contain at least two values';
  }
}


// Assign values
@mixin assign-values($prop, $val, $breakpoint: null) {
  // If not responsive
  @if $breakpoint == null { 
    #{$prop}: $val;
  } 

  // If responsive
  @else {
    @include media-query($breakpoint) {
      #{$prop}: $val;
    }
  }
}


// If value is a number has a unit
@function is-valid-number($val) {
  @if type-of($val) == number and not unitless($val) {
    @return true; 
  } @else {
    @return false;
  }
}


// Increment value
@function increment($val) {
  $val: $val + 1;
  @return $val;
}


// Find type of requested value
@function evaluate-type($value, $list: ()) {
  @each $key, $prop in $grid-map {
    @if list-contains($prop, $value) { 
      @return construct-type($key);
    } 
  }

  @if length($list == 0) {
    @return false;
  }
}


// Find type of requested value
@function evaluate-type2($value) {
  @if type-of($value) == number and not unitless($value) {
    @return 'is-number-and-unit';
  }
  @else if type-of($value) == number and unitless($value) {
    @return 'is-unitless-number';
  } @else {
    @each $key, $prop in $grid-map {
      @if list-contains($prop, $value) { 
        @return construct-type($key);
      }
    }
  }

  @return false;
}



@mixin return-values($arg, $index: 1, $breakpoint: null, $prop: 'grid-template-columns', $val: 1fr, $is-responsive: null, $list: ()) {
  $length: length($arg);

  $type: evaluate-type2(nth($arg,$index));
  $is-responsive: if($type == is-responsive, true, false);
  
  @if $is-responsive and $length > 1 {
    $breakpoint: nth($arg, 1);
    $is-responsive: true;
    $index: $index + 1;
    $type: evaluate-type2(nth($arg,$index));
  }
  

  $is-property: if($type == is-property, true, false);
  $is-number: if($type == is-number-and-unit, true, false);
  $is-unitless-number: if($type == is-unitless-number, true, false);
  $is-empty: if($arg == null, true, false);
  $is-repeat: if(nth($arg, $index) == repeat, true, false);

  
  @if $is-property and not $is-repeat {
    @if ($is-responsive and $length != 3) or (not $is-responsive and $length != 2) {
      @warn 'Incorrect number of arguments. Grid-gap and padding have only one numeric value. e.g. grid-gap 20px.'
    } 
    
    @else {
      $prop: nth($arg, $index);
      $index: $index + 1;
      $val: nth($arg, $index);
      
      @if evaluate-type2($val) == is-number-and-unit { $val: nth($arg, $index); }
      @else { @warn $val 'Value must be numeric with unit assignment'; }
    }
  }
  
  @if $is-repeat {
    @if ($is-responsive and $length != 4) or (not $is-responsive and $length != 3) {
      @warn 'Repeat requires two numeric values. The first value is unitless, second value has unit assignment.';
    } 
    
    @else {
      $prop: 'grid-template-columns';
      $index: $index + 1;

      @for $i from $index through $length { 
        $list: append($list, nth($arg, $i)); 
      }       
      
      @if length($list) == 2 and evaluate-type2(nth($list, 1)) == is-unitless-number and evaluate-type2(nth($list, 2)) == is-number-and-unit {
        $val: repeat(#{nth($list, 1)}, #{nth($list, 2)});
      }
      
      @else {
        @warn 'First value for repeat must be unitless, the second value must be numeric with a unit assignment. e.g. repeat 2 1fr';
      }
    }
  }

  @else if evaluate-type2(nth($arg, $index)) == is-number-and-unit or evaluate-type2(nth($arg, $index)) == is-keyword {
    
    @for $i from $index through length($arg) {
      $val: nth($arg, $i);
      $list: append($list, $val);
    }
    
    $val: $list;    
  } 
  
  @include assign-values($prop, $val, $breakpoint);
}


@mixin build-grid($args...) {
  display: grid;
  grid-gap: $global-grid-gap;
  padding: $global-grid-padding;
  box-sizing: border-box;
    
  @each $arg in $args {
    @include return-values($arg); 
  } 
}

// Usage: grid cell
@mixin grid-rows() {
  
} 



.build-me {

  // @include build-grid(repeat 2 1fr, grid-gap 120px, sm grid-gap 40px);
  height: 100%;
}

