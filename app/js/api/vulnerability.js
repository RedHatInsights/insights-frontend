'use strict';

const apiModule = require('./');
const URI = require('urijs');

/**
 * @ngInject
 */
function Vulnerability (
                        $http,
                        $q,
                        AccountService,
                        Group,
                        InsightsConfig) {

    const root = InsightsConfig.apiRoot;

    return {
        getPackages (params) {
            const url = URI(root);
            url.segment('packages');
            url.addSearch(AccountService.queryParam());
            url.addSearch(Group.queryParam());
            if (params) {
                url.addSearch(params);
            }

            return $http.get(url.toString());
        },

        getPackage(id) {
            const url = URI(root);
            url.segment('packages');
            url.segment(String(id));
            url.addSearch(AccountService.queryParam());
            return $http.get(url.toString());
        },

        getPackageErrata(id, params) {
            const url = URI(root);
            url.segment('packages');
            url.segment(String(id));
            url.segment('errata');
            url.addSearch(AccountService.queryParam());
            url.addSearch(Group.queryParam());
            url.addSearch(params);
            return $http.get(url.toString());
        },

        getRHSAs (params = {}) {
            const url = URI(root);
            url.segment('errata');
            url.addSearch(AccountService.queryParam());
            url.addSearch(Group.queryParam());
            url.addSearch(params);
            return $http.get(url.toString());
        },

        getRHSA (id) {
            const url = URI(root);
            url.segment('errata');
            url.segment(String(id));
            url.addSearch(AccountService.queryParam());
            return $http.get(url.toString());
        },

        getRHSASystems (id, params) {
            const url = URI(root);
            url.segment('errata');
            url.segment(String(id));
            url.segment('systems');
            url.addSearch(AccountService.queryParam());
            if (params) {
                url.addSearch(params);
            }

            return $http.get(url.toString());
        },

        getCVEs (params) {
            const url = URI(root);
            url.segment('cves');
            url.addSearch(AccountService.queryParam());
            url.addSearch(Group.queryParam());
            url.addSearch(params);
            return $http.get(url.toString());
        },

        getCVE (id) {
            const url = URI(root);
            url.segment('cves');
            url.segment(encodeURIComponent(id));
            url.addSearch(AccountService.queryParam());
            return $http.get(url.toString());
        }
    };
}

apiModule.factory('Vulnerability', Vulnerability);
